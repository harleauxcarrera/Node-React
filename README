This is the Node-React tutorial

Use this page as a reference to points in time where the lectures were being watched
Title every new entry with the date and the section of the lectures that you were writing about


November 8th, 2017 // Just watched 'Section 4 Lecture 30'
  Implemented Google OAuth up to the point where

  Logging in works like this:
  Signup with google-> takes u to google sign in page-> log in on google -> makes an entry
  for the user in the database with returned credentials and then redirects
  to website. Each time user logs in after signing up, mongodb will check to see if
  user already exists by matching the ID in DB and if so, return with a cookie that grants
  access that particular visit.

  MONGODB INTRO:
  Make a 'Model Class' that acts as a monogdb collection
  A 'Model instance' refers to a single record in the collection (JSON)

  Created a mongodb instance on Mlab.com with user: harleauxcarrera pss: pLease313

  left off at section 4 lecture 33 @4:50 where initial attempt
  to connect to Mongodb instance made on Mlab.com
  using the MONGOURI

   trying to require 'keys.js' not working

Monday November 20th :
  Was able to fix the require 'keys ' file
  Next I fixed the Mlab URI and am now connecting to the instance of MongoDB on mlab
  (Lecture 34)
  Finally create new user instance in mongo User collection
    grab the user's google profile id and save to property 'googleId' defined in User model Schema
      ensure that the same user doesn't get created twice by checking User collection
      and making sure user with same googleId doesn't already exist
  left off at lecture 39

Wednesday November 22nd,
Lecture 42
  Enabled cookies in app
    tell  passport to use  cookies to manage google authentication
  How cookies work:
    Request comes in, cookie-session extracts cookie data-> passport pulls userid
    out of cookie data->deserializeUser function used to turn userid into a user object->
    that user model gets added to the request and sent to route handler

    Left off  lecture 42 -  attempt is made to visit /api/current_user
    and see the returned user printed  but comes back undefined.
Thursday November 24th
Lecture 42
  Fixed order of statements (app.use CookieSession comes before the initialize and session() calls)
Lecture 46
  Making two sets of keys, one for production (deployment) and one for development
      Need to create seperate Mongo database and Google API account to have seperate set of keys
        Create database in  mlab
          create new user (for access using URI)
        Create new project at console.developers.google.com
          Enable the API
          search for google+ API
            Click Enable
              create new credentials of type Oauth client id
                configure consent
            Web application
              Authorized redirect URIS specifies what URL to go back to after google Auth in app
                (use Heroku url for production set)
            Heroku deployment
                Add "engines" in package.json, specify what version of node and npm
                Specify a start script. have to tell heroku what command to run to start server
                  add "start" script in package.json
                Create a .gitIgnore file to not commit any dependencies to git
                Refer to lecture 13 for any new deployments of nodejs projects to Heroku
              Deployment process
                Create Heroku account
                Install heroku cli
                  heroku login
                  heroku create   (create ap)
                    Generates random url for site and gitHub repo that acts as deployment
                    use git remote add <heroku.git url> (might already exist)
                      git push heroku master to push to deployment repo
                      
